
class Path:
    def __init__(self, source, sink, absolute_frequency=None):
        """
        A path symbolize a unique sequence from one activity in the process to anoter.

        Parameters
        ___________
        :param source: Object of class Activity
        :param sink:  Object of class Activity
        :param absolute_frequency:  Frequenciy how often the combination of source and simk appears
        """
        self.__source = source
        self.__sink = sink
        self.__dependency_measure = None
        if absolute_frequency is None:
            self.__absolute_frequency = 1
        else:
            self.__absolute_frequency = absolute_frequency

    def __str__(self):
        return str(self.__dict__)

    def __repr__(self):
        return str([self.source, self.sink, self.__absolute_frequency, self.__dependency_measure])

    def __eq__(self, other):
        if self.source == other.source and self.sink == other.sink:
            return True
        else:
            return False

    def __hash__(self):
        return hash((self.source, self.sink))

    def set_dependency_measure(self, dependency_measure):
        self.dependency_measure = dependency_measure

    @property
    def source(self):
        return self.__source
    @property
    def sink(self):
        return self.__sink

    def get_path_as_dict(self):
        return {"source": self.source, "sink": self.sink}

    @property
    def frequency(self):
        return self.__absolute_frequency

    # TODO-fixme use type hinting for number! Im still not sure if this is the best way to do it
    def increase_absolute_frequency(self, number = None):
        if number is None:
            self.__absolute_frequency += 1
        else:
            self.__absolute_frequency += number

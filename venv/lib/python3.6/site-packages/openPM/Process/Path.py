class Path:
    def __init__(self, source, sink, absolute_frequency=None):
        self.source = source
        self.sink = sink
        if absolute_frequency is None:
            self.absolute_frequency = 1
        else:
            self.absolute_frequency = absolute_frequency

    def __str__(self):
        return str(self.__dict__)

    def __eq__(self, other):
        if self.source == other.source and self.sink == other.sink:
            return True
        else:
            return False

    def __hash__(self):
        return hash((self.source, self.sink))

    def __repr__(self):
        return str([self.source, self.sink, self.absolute_frequency])

    def get_source(self):
        return self.source

    def get_sink(self):
        return self.sink

    def get_path_as_dict(self):
        return {"source": self.source, "sink": self.sink}

    def get_frequency(self):
        return self.absolute_frequency

    # TODO-fixme use type hinting for number! Im still not sure if this is the best way to do it
    def increase_absolute_frequency(self, number = None):
        if number is None:
            self.absolute_frequency += 1
        else:
            self.absolute_frequency += number
